#!/usr/bin/env python 

import pandas as pd 
import argparse
import glob
import os
import json 
import sys
import re

parser = argparse.ArgumentParser()
# parser.add_argument('-s', '--sample_report', default=None, help= "Input Samplereport.csv associated to order, generated by primary analysis pipeline")
parser.add_argument('--output_dir', default="./", help="Output directory, default=cwd, default='./'")
parser.add_argument('--lims_csv', help='provide fcid')
parser.add_argument('--fastq_path', help='path to flowcell')
parser.add_argument('--RoboIndex_samplesheet')
args=parser.parse_args()

Output = [] #fastq files
Order = [] # molng id 
OrderType = [] 
SampleName = []
LibraryID = []
IndexSequences = [] #combined index sequences index1-index2 
Read = [] #read 1 or 2 
Reference = [] #reference genome
Species = [] # reference species
Lab = []
# TotalReads = [] # Get is from after the multiQC
# AlignPercent = [] # Get is from after the multiQC 
Type = []
ReadLength = []
resultPaths = []
fileNames = []
annotations = []

df_lims_info = pd.read_csv(args.lims_csv)

available_genomesAnnotations={}
df_robosamplesheet = pd.read_csv(args.RoboIndex_samplesheet)
for index, row in df_robosamplesheet.iterrows():
    available_genomesAnnotations.setdefault( str(row["id"]), str(row["annotation_version"]) )

for index, row in df_lims_info.iterrows():
    libID = row["libID"]
    for fastqfiles in glob.glob(f"{args.fastq_path}/{libID}*.fastq.gz"):
        if fastqfiles in Output:
            continue
        Output.append(fastqfiles)
        Order.append(row["prnOrderNo"])
        OrderType.append(row["orderType"])
        SampleName.append(row["sampleName"])
        LibraryID.append(libID)
        data_index_list = json.loads(row["indexes"].replace("'", "\"")) # Read the index string as a json file 
        IndexSequences.append("-".join(s['sequence'] for s in data_index_list)) 

        #get the read number#
        pattern = re.compile(r'R(\d+)')
        match = pattern.search(os.path.basename(fastqfiles))
        if match:
            number_after_R = match.group(1)
            read_num = number_after_R
        else:
            sys.exit(f"File: {fastqfiles}, No number after 'R'. Check fastq file naming!")
        # read_num = os.path.basename(fastqfiles).split("_")[-2].replace("R","")
        #get the read number#

        Read.append(read_num)
        Reference.append(row["genomeVersion"])
        
        if row["genomeVersion"] in available_genomesAnnotations: # Adding annotation information from SIMR ROBOINDEX collection
            annotations.append(available_genomesAnnotations[row["genomeVersion"]])
        else:
            sys.exit(f"Genome reference {row['genomeVersion']} not in Reference Index collection.")
            
        Species.append(str(row["speciesName"]).replace(" ","_").split("_(")[0]) # This is so that lims can have a space within the species name
        # Saccharomycodes ludwigii (sacLud); this is what lims will give out when species and genome version is provided under speciesName 
        Lab.append(row["requestingDepartment"])
        Type.append(row["readType"])
        ReadLength.append(row["readLength"])
        resultPaths.append(row["resultPaths"])
        fileNames.append(os.path.basename(fastqfiles).replace(".fastq.gz",""))

df_driver = pd.DataFrame()
df_driver["Output"] = Output
df_driver["Order"] = Order
df_driver["OrderType"] = OrderType
df_driver["SampleName"] = SampleName
df_driver["LibraryID"] = LibraryID
df_driver["IndexSequences"] = IndexSequences
df_driver["Read"] = Read
df_driver["Reference"] = Reference
df_driver["Species"] = Species
df_driver["Lab"] = Lab
df_driver["Type"] = Type
df_driver["ReadLength"] = ReadLength
df_driver["resultPaths"] = resultPaths
df_driver["fileNames"] = fileNames
df_driver["annotation"] = annotations

if len(df_driver) < 1:
    sys.exit("ERROR: PrimeG4_driver.csv table is empty! Check LIMs data fetching process or fastq data structure.")
else:
    df_driver.to_csv("PRIME_driver.csv", index=False)