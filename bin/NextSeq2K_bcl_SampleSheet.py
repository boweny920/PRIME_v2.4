#!/usr/bin/env python 

import pandas as pd 
import argparse
import os
import json 
import sys

parser = argparse.ArgumentParser()
# parser.add_argument('-s', '--sample_report', default=None, help= "Input Samplereport.csv associated to order, generated by primary analysis pipeline")
parser.add_argument('--output_dir', default="./", help="Output directory, default=cwd, default='./'")
parser.add_argument('--lims_csv', help='provide lims_info.csv')
parser.add_argument('--run_type', default='RNA-Seq', help='order type, RNAseq or 10x ?')
args=parser.parse_args()

df_lims_info = pd.read_csv(args.lims_csv)


if "RNA" in args.run_type:
#For RNAseq orders create SampleSheet for bclconvert    
# use AAC7NV3HV , /n/ngs/data/NextSeq2K/230919_VH00629_133_AAC7NV3HV as test 
    df = df_lims_info[["libID","indexes"]].drop_duplicates()
    with open(os.path.join(args.output_dir,"SampleSheet.csv"), "w") as f:
        f.write('[Header],,,,\n')
        f.write('[Data],,,,\n')
        f.write('Sample_ID,Sample_Name,index,index2\n')
        for index_, row in df.iterrows():
            libID = row["libID"]
            data_index_list = json.loads(row["indexes"].replace("'", "\"")) # Read the index string as a json file 
            if len(data_index_list) > 2:
                sys.exit("This order has more than 2 indexes! Check info fetched from lims.")
            sampe_name = "-".join([libID,"-".join(s['sequence'] for s in data_index_list)])
            if len(data_index_list) == 2:
                index = ','.join(s['sequence'] for s in data_index_list)
            elif len(data_index_list) == 1:
                index = f"{data_index_list[0]['sequence']}," 
            f.write(f"{libID},{sampe_name},{index}\n")

else:
    #For 10X single cell orders create SampleSheet for cellranger mkfastq
    #use AAAYVMKHV , /n/ngs/data/NextSeq2K/230809_VH00629_123_AAAYVMKHV as test 
    df = df_lims_info[["laneId","libID","indexes"]].drop_duplicates()

    with open(os.path.join(args.output_dir,"SampleSheet.csv"), "w") as f:
        f.write("Lane,Sample,Index\n")
        for index_, row in df.iterrows():
            data_index_list = json.loads(row["indexes"].replace("'", "\""))
            index_lable = data_index_list[0]['label'].split("_")[0]
            f.write(f"{row['laneId']},{row['libID']},{index_lable}\n")
