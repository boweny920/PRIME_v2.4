params.fcid = "" //Make this "" when actually running!!
params.fcpath = ""
params.molng = ""
params.outdir = "/n/core/Bioinformatics/secondary/" 
params.annotation = "" 
params.machine_type = "" //G4 or Aviti or NextSeq2K
params.run_type = "RNA-Seq" // 10X or RNA-Seq
params.genome = "" // This is so that you could use another genome in the index folder, you cannot just provide any path; This index must also be generated by RoboIndex! 
params.indexDir = "/n/analysis/genomes"
params.user_email = "by2747@stowers.org"
params.only_cp_fastq = ""
params.fastq_dir = "" // Directory to the already demultiplex fastqs. The demultiplexed fastqs should still follow standard nameing: LibID_SampleID_LaneID_00#.fastq.gz. NOTE: must be full path! 
params.samplesheet_RoboIndex = "/n/analysis/genomes/sampleSheet_ROBOINDEX_2023.csv"
params.novaseq = "False"

// using /n/ngs/data/Aviti/AV230402/20230726_AV230402_2312506824 to test the pipeline

include {lims_info_process} from "./modules/Aviti_core_10X.nf"
include {AVITI_10X; AVITI_RNASEQ} from "./workflows/PrimeAviti.nf"
include {G4_RNASEQ; G4_10X} from "./workflows/PrimeG4.nf"
include {AVITI_noRef} from "./workflows/No_References/PrimeAviti_noRef.nf"
include {G4_noRef} from "./workflows/No_References/PrimeG4_noRef.nf"
include {NX2K_noRef} from "./workflows/No_References/PrimeNX2K_noRef.nf"
include {NX2K_RNASEQ; NX2K_10X} from "./workflows/PrimeNX2K.nf"

def report 

workflow {

    if (!params.fcid) {
        exit 1, "ERROR: Provide a FCID from LIMS"
    } else if (!params.fcpath) {
        exit 1, "ERROR: Provide a FC path in /n/ngs/data"
    } else {
        if (!params.only_cp_fastq) {
            // Main Block
                // Main Aviti Block:
            if (params.machine_type.contains("Aviti")) {
                if (params.run_type.contains("10X")) {
                    lims_info_process(params.fcid)
                    AVITI_10X(lims_info_process.out)
                    report = AVITI_10X.out
                } else if (params.run_type.contains("RNA-Seq")) { // Everything that is not 10x go through the fastq bowtie multiQC primary analysis! 
                    lims_info_process(params.fcid)
                    AVITI_RNASEQ(lims_info_process.out)
                    report = AVITI_RNASEQ.out
                } else {
                    exit 1, "ERROR: Provide a correct run type, RNA-Seq or 10Xsc ?"
                }   
                
                // Main G4 Block:
            } else if (params.machine_type.contains("G4")) {
                if (params.run_type.contains("10X")) {
                    lims_info_process(params.fcid)
                    G4_10X(lims_info_process.out)
                    report = G4_10X.out
                } else if (params.run_type.contains("RNA-Seq")) { // Everything that is not 10x go through the fastq bowtie multiQC primary analysis! 
                    lims_info_process(params.fcid)
                    G4_RNASEQ(lims_info_process.out)
                    report = G4_RNASEQ.out
                } else {
                    exit 1, "ERROR: Provide a correct run type, RNA-Seq or 10Xsc ?"
                }   

            // NextSeq2000 Block:
            } else if (params.machine_type.contains("NextSeq")) { 
                if (params.run_type.contains("10X")) {
                    lims_info_process(params.fcid)
                    NX2K_10X(lims_info_process.out)
                    report = NX2K_10X.out
                } else if (params.run_type.contains("RNA-Seq")) { // Everything that is not 10x or Genome Engineering go through the fastq bowtie multiQC primary analysis! 
                    lims_info_process(params.fcid)
                    NX2K_RNASEQ(lims_info_process.out)
                    report = NX2K_RNASEQ.out
                } else {
                    exit 1, "ERROR: Provide a correct run type, RNA-Seq or 10Xsc ?"
                }    

            } else {
                exit 1, "ERROR: Provide a correct machine type, G4 or Aviti or NextSeq2K?"
            }

            // Block for orders without Reference Genome 
        } else {
                // No Reference Aviti Block
            if (params.machine_type.contains("Aviti")) {
                lims_info_process(params.fcid)
                AVITI_noRef(lims_info_process.out)
                report = AVITI_noRef.out

                // No reference G4 Block:
            } else if (params.machine_type.contains("G4")) {
                lims_info_process(params.fcid)
                G4_noRef(lims_info_process.out)
                report = G4_noRef.out

                // No reference NX2K Block:
            } else if (params.machine_type.contains("NextSeq")) {
                lims_info_process(params.fcid)
                NX2K_noRef(lims_info_process.out)
                report = NX2K_noRef.out

            } else {
                exit 1, "ERROR: Provide a correct machine type, G4 or Aviti ?"
            }
        }
    }
}

 // Declare the report variable outside the workflow block

workflow.onComplete {

    def msg = """\
        PRIME Pipeline execution summary
        ---------------------------
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        workDir     : ${workflow.workDir}
        Machine type : ${params.machine_type}
        Order type : ${params.run_type} 
        Job status : ${ workflow.success ? "Success! Run Report link : ${report.value}" : "failed, error message: ${workflow.errorMessage}" }
        """
        .stripIndent()
    
    println msg 
    sendMail(to: 'by2747@stowers.org', subject: "${params.fcid} PRIME pipeline execution", body: msg)
}